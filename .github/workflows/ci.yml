name: CI
on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package.json
      - run: npm ci
      - run: npm run lint --if-present || echo "Skipping lint (no ESLint config found)"
      - run: npm test --if-present
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm run lint --if-present || echo "Skipping lint (no ESLint config found)"
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  dashboards:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/upload-artifact@v4
        with:
          name: grafana-dashboards
          path: observability/provisioning/dashboards/json

  sast:
    name: Static Code Analysis (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"
          auditOn: "error"

  sca:
    name: Dependency Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Scan for vulnerable dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          exit-code: 1

  dast:
    name: Dynamic Application Security Test (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - uses: actions/checkout@v4

      - name: Build and start services
        run: |
          echo "Starting services with Docker Compose..."
          docker compose up -d
          echo "Waiting for services to start..."
          sleep 30
          echo "Checking container status after startup:"
          docker compose ps

      - name: Wait for application to be ready
        run: |
          echo "Checking backend container status..."
          if ! docker compose ps backend | grep -q "Up"; then
            echo "Backend container is not running!"
            echo "Container status:"
            docker compose ps backend
            echo "Backend logs:"
            docker compose logs backend
            exit 1
          fi
          
          echo "Backend container is running, checking if application is accessible..."
          timeout=60
          count=0
          until curl -f http://localhost:3000/healthz 2>/dev/null; do
            if [ $count -ge $timeout ]; then
              echo "Timeout waiting for application to start"
              echo "Checking running containers:"
              docker ps
              echo "Checking container logs:"
              docker compose logs backend
              echo "Checking network connectivity:"
              curl -v http://localhost:3000/healthz || echo "Health check failed"
              exit 1
            fi
            echo "Waiting for application health check... ($count/$timeout)"
            sleep 2
            count=$((count + 2))
          done
          echo "Application is ready!"
          echo "Health check successful:"
          curl http://localhost:3000/healthz
          echo ""
          echo "Available endpoints for testing:"
          echo "- GET  /healthz (health check)"
          echo "- GET  /metrics (Prometheus metrics)"
          echo "- GET  /api/tasks (list tasks)"
          echo "- POST /api/tasks (create task)"

      - name: Test API endpoints
        run: |
          echo "Testing root endpoint..."
          curl -f http://localhost:3000/ || echo "Root endpoint failed"
          
          echo "Testing robots.txt..."
          curl -f http://localhost:3000/robots.txt || echo "Robots.txt failed"
          
          echo "Testing sitemap.xml..."
          curl -f http://localhost:3000/sitemap.xml || echo "Sitemap.xml failed"
          
          echo "Testing /api/tasks endpoint..."
          curl -f http://localhost:3000/api/tasks || echo "Tasks endpoint failed"
          
          echo "All endpoint tests completed!"

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          fail_action: true
          allow_issue_writing: false
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -m 5 -T 60 -I"

      - name: Upload ZAP HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-html-report
          path: report_html.html

      - name: Upload ZAP JSON report  
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-json-report
          path: report_json.json

      - name: Upload ZAP Markdown report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-md-report
          path: report_md.md

      - name: Cleanup services
        if: always()
        run: |
          echo "Stopping and cleaning up services..."
          docker compose logs --tail=50 || echo "Could not get logs"
          docker compose down -v --remove-orphans || echo "Cleanup completed with warnings"
