name: CI
on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package.json
      - run: npm ci
      - run: npm run lint --if-present || echo "Skipping lint (no ESLint config found)"
      - run: npm test --if-present
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm run lint --if-present || echo "Skipping lint (no ESLint config found)"
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  dashboards:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/upload-artifact@v4
        with:
          name: grafana-dashboards
          path: observability/provisioning/dashboards/json

  sast:
    name: Static Code Analysis (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"
          auditOn: "error"

  sca:
    name: Dependency Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Scan for vulnerable dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          exit-code: 1

dast:
  name: Dynamic Application Security Test (OWASP ZAP)
  runs-on: ubuntu-latest
  needs: [sast, sca]
  steps:
    - uses: actions/checkout@v4

    - name: Build and start services
      run: |
        docker compose up -d
        sleep 15

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: "http://localhost:3000"
        fail_action: false
        cmd_options: "-a -r /zap/wrk/zap_report.html"

    - name: Upload ZAP report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap_report.html
